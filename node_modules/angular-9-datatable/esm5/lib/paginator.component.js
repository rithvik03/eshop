import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, Optional } from "@angular/core";
import { DataTable, PageEvent } from "./data-table.directive";
var Paginator = /** @class */ (function () {
    function Paginator(injectMfTable) {
        var _this = this;
        this.injectMfTable = injectMfTable;
        this.dataLength = 0;
        this.onPageChangeSubscriber = function (event) {
            _this.activePage = event.activePage;
            _this.rowsOnPage = event.rowsOnPage;
            _this.dataLength = event.dataLength;
            _this.lastPage = Math.ceil(_this.dataLength / _this.rowsOnPage);
        };
    }
    Paginator.prototype.ngOnChanges = function (changes) {
        this.mfTable = this.inputMfTable || this.injectMfTable;
        this.onPageChangeSubscriber(this.mfTable.getPage());
        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);
    };
    Paginator.prototype.setPage = function (pageNumber) {
        this.mfTable.setPage(pageNumber, this.rowsOnPage);
    };
    Paginator.prototype.setRowsOnPage = function (rowsOnPage) {
        this.mfTable.setPage(this.activePage, rowsOnPage);
    };
    Paginator.ctorParameters = function () { return [
        { type: DataTable, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input("mfTable"),
        __metadata("design:type", DataTable)
    ], Paginator.prototype, "inputMfTable", void 0);
    Paginator = __decorate([
        Component({
            selector: "mfPaginator",
            template: "<ng-content></ng-content>"
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [DataTable])
    ], Paginator);
    return Paginator;
}());
export { Paginator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItOS1kYXRhdGFibGUvIiwic291cmNlcyI6WyJsaWIvcGFnaW5hdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTJCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTTlEO0lBV0ksbUJBQXVDLGFBQXdCO1FBQS9ELGlCQUNDO1FBRHNDLGtCQUFhLEdBQWIsYUFBYSxDQUFXO1FBSHhELGVBQVUsR0FBVyxDQUFDLENBQUM7UUFvQnRCLDJCQUFzQixHQUFHLFVBQUMsS0FBZ0I7WUFDOUMsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ25DLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUNuQyxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7WUFDbkMsS0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQztJQXJCRixDQUFDO0lBRU0sK0JBQVcsR0FBbEIsVUFBbUIsT0FBd0M7UUFDdkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDdkQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVNLDJCQUFPLEdBQWQsVUFBZSxVQUFrQjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxpQ0FBYSxHQUFwQixVQUFxQixVQUFrQjtRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7O2dCQWZxRCxTQUFTLHVCQUEzQyxRQUFROztJQVRWO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7a0NBQWUsU0FBUzttREFBQztJQUZqQyxTQUFTO1FBSnJCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFFBQVEsRUFBRSwyQkFBMkI7U0FDeEMsQ0FBQztRQVlzQixXQUFBLFFBQVEsRUFBRSxDQUFBO3lDQUF3QixTQUFTO09BWHRELFNBQVMsQ0FrQ3JCO0lBQUQsZ0JBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQWxDWSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgU2ltcGxlQ2hhbmdlLCBPbkNoYW5nZXMsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRGF0YVRhYmxlLCBQYWdlRXZlbnQgfSBmcm9tIFwiLi9kYXRhLXRhYmxlLmRpcmVjdGl2ZVwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJtZlBhZ2luYXRvclwiLFxyXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdG9yIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoXCJtZlRhYmxlXCIpIGlucHV0TWZUYWJsZTogRGF0YVRhYmxlO1xyXG5cclxuICAgIHByaXZhdGUgbWZUYWJsZTogRGF0YVRhYmxlO1xyXG5cclxuICAgIHB1YmxpYyBhY3RpdmVQYWdlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcm93c09uUGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIGRhdGFMZW5ndGg6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgbGFzdFBhZ2U6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBpbmplY3RNZlRhYmxlOiBEYXRhVGFibGUpIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBba2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfSk6IGFueSB7XHJcbiAgICAgICAgdGhpcy5tZlRhYmxlID0gdGhpcy5pbnB1dE1mVGFibGUgfHwgdGhpcy5pbmplY3RNZlRhYmxlO1xyXG4gICAgICAgIHRoaXMub25QYWdlQ2hhbmdlU3Vic2NyaWJlcih0aGlzLm1mVGFibGUuZ2V0UGFnZSgpKTtcclxuICAgICAgICB0aGlzLm1mVGFibGUub25QYWdlQ2hhbmdlLnN1YnNjcmliZSh0aGlzLm9uUGFnZUNoYW5nZVN1YnNjcmliZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQYWdlKHBhZ2VOdW1iZXI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubWZUYWJsZS5zZXRQYWdlKHBhZ2VOdW1iZXIsIHRoaXMucm93c09uUGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJvd3NPblBhZ2Uocm93c09uUGFnZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tZlRhYmxlLnNldFBhZ2UodGhpcy5hY3RpdmVQYWdlLCByb3dzT25QYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUGFnZUNoYW5nZVN1YnNjcmliZXIgPSAoZXZlbnQ6IFBhZ2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlUGFnZSA9IGV2ZW50LmFjdGl2ZVBhZ2U7XHJcbiAgICAgICAgdGhpcy5yb3dzT25QYWdlID0gZXZlbnQucm93c09uUGFnZTtcclxuICAgICAgICB0aGlzLmRhdGFMZW5ndGggPSBldmVudC5kYXRhTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubGFzdFBhZ2UgPSBNYXRoLmNlaWwodGhpcy5kYXRhTGVuZ3RoIC8gdGhpcy5yb3dzT25QYWdlKTtcclxuICAgIH07XHJcbn0iXX0=