(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('lodash'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-9-datatable', ['exports', '@angular/core', 'lodash', 'rxjs', '@angular/common'], factory) :
    (global = global || self, factory(global['angular-9-datatable'] = {}, global.ng.core, global.lodash, global.rxjs, global.ng.common));
}(this, (function (exports, core, lodash, rxjs, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var DataTable = /** @class */ (function () {
        function DataTable(differs) {
            this.differs = differs;
            this.inputData = [];
            this.sortBy = "";
            this.sortOrder = "asc";
            this.sortByChange = new core.EventEmitter();
            this.sortOrderChange = new core.EventEmitter();
            this.rowsOnPage = 1000;
            this.activePage = 1;
            this.mustRecalculateData = false;
            this.onSortChange = new rxjs.ReplaySubject(1);
            this.onPageChange = new core.EventEmitter();
            this.diff = differs.find([]).create(null);
        }
        DataTable.prototype.getSort = function () {
            return { sortBy: this.sortBy, sortOrder: this.sortOrder };
        };
        DataTable.prototype.setSort = function (sortBy, sortOrder) {
            if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {
                this.sortBy = sortBy;
                this.sortOrder = lodash.includes(["asc", "desc"], sortOrder) ? sortOrder : "asc";
                this.mustRecalculateData = true;
                this.onSortChange.next({ sortBy: sortBy, sortOrder: sortOrder });
                this.sortByChange.emit(this.sortBy);
                this.sortOrderChange.emit(this.sortOrder);
            }
        };
        DataTable.prototype.getPage = function () {
            return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };
        };
        DataTable.prototype.setPage = function (activePage, rowsOnPage) {
            if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {
                this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);
                this.rowsOnPage = rowsOnPage;
                this.mustRecalculateData = true;
                this.onPageChange.emit({
                    activePage: this.activePage,
                    rowsOnPage: this.rowsOnPage,
                    dataLength: this.inputData ? this.inputData.length : 0
                });
            }
        };
        DataTable.prototype.calculateNewActivePage = function (previousRowsOnPage, currentRowsOnPage) {
            var firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;
            var newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);
            return newActivePage;
        };
        DataTable.prototype.recalculatePage = function () {
            var lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);
            this.activePage = lastPage < this.activePage ? lastPage : this.activePage;
            this.activePage = this.activePage || 1;
            this.onPageChange.emit({
                activePage: this.activePage,
                rowsOnPage: this.rowsOnPage,
                dataLength: this.inputData.length
            });
        };
        DataTable.prototype.ngOnChanges = function (changes) {
            if (changes["rowsOnPage"]) {
                this.rowsOnPage = changes["rowsOnPage"].previousValue;
                this.setPage(this.activePage, changes["rowsOnPage"].currentValue);
                this.mustRecalculateData = true;
            }
            if (changes["sortBy"] || changes["sortOrder"]) {
                if (!lodash.includes(["asc", "desc"], this.sortOrder)) {
                    console.warn("angular2-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:", this.sortOrder);
                    this.sortOrder = "asc";
                }
                if (this.sortBy) {
                    this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });
                }
                this.mustRecalculateData = true;
            }
            if (changes["inputData"]) {
                this.inputData = changes["inputData"].currentValue || [];
                this.recalculatePage();
                this.mustRecalculateData = true;
            }
        };
        DataTable.prototype.ngDoCheck = function () {
            var changes = this.diff.diff(this.inputData);
            if (changes) {
                this.recalculatePage();
                this.mustRecalculateData = true;
            }
            if (this.mustRecalculateData) {
                this.fillData();
                this.mustRecalculateData = false;
            }
        };
        DataTable.prototype.fillData = function () {
            this.activePage = this.activePage;
            this.rowsOnPage = this.rowsOnPage;
            var offset = (this.activePage - 1) * this.rowsOnPage;
            var data = this.inputData;
            var sortBy = this.sortBy;
            if (typeof sortBy === 'string' || sortBy instanceof String) {
                data = lodash.orderBy(data, this.caseInsensitiveIteratee(sortBy), this.sortOrder == 'asc' ? 'asc' : 'desc');
            }
            else {
                data = lodash.orderBy(data, sortBy, this.sortOrder == 'asc' ? 'asc' : 'desc');
            }
            data = lodash.slice(data, offset, offset + this.rowsOnPage);
            this.data = data;
        };
        DataTable.prototype.caseInsensitiveIteratee = function (sortBy) {
            return function (row) {
                var e_1, _a;
                var value = row;
                try {
                    for (var _b = __values(sortBy.split('.')), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var sortByProperty = _c.value;
                        if (value) {
                            value = value[sortByProperty];
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (value && typeof value === 'string' || value instanceof String) {
                    return value.toLowerCase();
                }
                return value;
            };
        };
        DataTable.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.Input("mfData"),
            __metadata("design:type", Array)
        ], DataTable.prototype, "inputData", void 0);
        __decorate([
            core.Input("mfSortBy"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "sortBy", void 0);
        __decorate([
            core.Input("mfSortOrder"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "sortOrder", void 0);
        __decorate([
            core.Output("mfSortByChange"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "sortByChange", void 0);
        __decorate([
            core.Output("mfSortOrderChange"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "sortOrderChange", void 0);
        __decorate([
            core.Input("mfRowsOnPage"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "rowsOnPage", void 0);
        __decorate([
            core.Input("mfActivePage"),
            __metadata("design:type", Object)
        ], DataTable.prototype, "activePage", void 0);
        DataTable = __decorate([
            core.Directive({
                selector: 'table[mfData]',
                exportAs: 'mfDataTable'
            }),
            __metadata("design:paramtypes", [core.IterableDiffers])
        ], DataTable);
        return DataTable;
    }());

    var DefaultSorter = /** @class */ (function () {
        function DefaultSorter(mfTable) {
            this.mfTable = mfTable;
            this.isSortedByMeAsc = false;
            this.isSortedByMeDesc = false;
        }
        DefaultSorter.prototype.ngOnInit = function () {
            var _this = this;
            this.mfTable.onSortChange.subscribe(function (event) {
                _this.isSortedByMeAsc = (event.sortBy == _this.sortBy && event.sortOrder == "asc");
                _this.isSortedByMeDesc = (event.sortBy == _this.sortBy && event.sortOrder == "desc");
            });
        };
        DefaultSorter.prototype.sort = function () {
            if (this.isSortedByMeAsc) {
                this.mfTable.setSort(this.sortBy, "desc");
            }
            else {
                this.mfTable.setSort(this.sortBy, "asc");
            }
        };
        DefaultSorter.ctorParameters = function () { return [
            { type: DataTable }
        ]; };
        __decorate([
            core.Input("by"),
            __metadata("design:type", String)
        ], DefaultSorter.prototype, "sortBy", void 0);
        DefaultSorter = __decorate([
            core.Component({
                selector: "mfDefaultSorter",
                template: "\n        <a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\n            <ng-content></ng-content>\n            <span *ngIf=\"isSortedByMeAsc\" class=\"glyphicon glyphicon-triangle-top fa fa-sort-up\" aria-hidden=\"true\"></span>\n            <span *ngIf=\"isSortedByMeDesc\" class=\"glyphicon glyphicon-triangle-bottom fa fa-sort-down\" aria-hidden=\"true\"></span>\n        </a>"
            }),
            __metadata("design:paramtypes", [DataTable])
        ], DefaultSorter);
        return DefaultSorter;
    }());

    var Paginator = /** @class */ (function () {
        function Paginator(injectMfTable) {
            var _this = this;
            this.injectMfTable = injectMfTable;
            this.dataLength = 0;
            this.onPageChangeSubscriber = function (event) {
                _this.activePage = event.activePage;
                _this.rowsOnPage = event.rowsOnPage;
                _this.dataLength = event.dataLength;
                _this.lastPage = Math.ceil(_this.dataLength / _this.rowsOnPage);
            };
        }
        Paginator.prototype.ngOnChanges = function (changes) {
            this.mfTable = this.inputMfTable || this.injectMfTable;
            this.onPageChangeSubscriber(this.mfTable.getPage());
            this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);
        };
        Paginator.prototype.setPage = function (pageNumber) {
            this.mfTable.setPage(pageNumber, this.rowsOnPage);
        };
        Paginator.prototype.setRowsOnPage = function (rowsOnPage) {
            this.mfTable.setPage(this.activePage, rowsOnPage);
        };
        Paginator.ctorParameters = function () { return [
            { type: DataTable, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input("mfTable"),
            __metadata("design:type", DataTable)
        ], Paginator.prototype, "inputMfTable", void 0);
        Paginator = __decorate([
            core.Component({
                selector: "mfPaginator",
                template: "<ng-content></ng-content>"
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [DataTable])
        ], Paginator);
        return Paginator;
    }());

    var BootstrapPaginator = /** @class */ (function () {
        function BootstrapPaginator() {
            this.rowsOnPageSet = [];
            this.minRowsOnPage = 0;
        }
        BootstrapPaginator.prototype.ngOnChanges = function (changes) {
            if (changes.rowsOnPageSet) {
                this.minRowsOnPage = lodash.min(this.rowsOnPageSet);
            }
        };
        __decorate([
            core.Input("rowsOnPageSet"),
            __metadata("design:type", Object)
        ], BootstrapPaginator.prototype, "rowsOnPageSet", void 0);
        __decorate([
            core.Input("mfTable"),
            __metadata("design:type", DataTable)
        ], BootstrapPaginator.prototype, "mfTable", void 0);
        BootstrapPaginator = __decorate([
            core.Component({
                selector: "mfBootstrapPaginator",
                template: "\n    <mfPaginator #p [mfTable]=\"mfTable\">\n        <ul class=\"pagination\" *ngIf=\"p.dataLength > p.rowsOnPage\">\n            <li class=\"page-item\" [class.disabled]=\"p.activePage <= 1\" (click)=\"p.setPage(1)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">&laquo;</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage > 4 && p.activePage + 1 > p.lastPage\" (click)=\"p.setPage(p.activePage - 4)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-4}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage > 3 && p.activePage + 2 > p.lastPage\" (click)=\"p.setPage(p.activePage - 3)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-3}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage > 2\" (click)=\"p.setPage(p.activePage - 2)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-2}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage > 1\" (click)=\"p.setPage(p.activePage - 1)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-1}}</a>\n            </li>\n            <li class=\"page-item active\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage + 1 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 1)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+1}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage + 2 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 2)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+2}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage + 3 <= p.lastPage && p.activePage < 3\" (click)=\"p.setPage(p.activePage + 3)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+3}}</a>\n            </li>\n            <li class=\"page-item\" *ngIf=\"p.activePage + 4 <= p.lastPage && p.activePage < 2\" (click)=\"p.setPage(p.activePage + 4)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+4}}</a>\n            </li>\n            <li class=\"page-item\" [class.disabled]=\"p.activePage >= p.lastPage\" (click)=\"p.setPage(p.lastPage)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">&raquo;</a>\n            </li>\n        </ul>\n        <ul class=\"pagination pull-right float-sm-right\" *ngIf=\"p.dataLength > minRowsOnPage\">\n            <li class=\"page-item\" *ngFor=\"let rows of rowsOnPageSet\" [class.active]=\"p.rowsOnPage===rows\" (click)=\"p.setRowsOnPage(rows)\">\n                <a class=\"page-link\" style=\"cursor: pointer\">{{rows}}</a>\n            </li>\n        </ul>\n    </mfPaginator>\n    "
            })
        ], BootstrapPaginator);
        return BootstrapPaginator;
    }());

    var NgxDataTableModule = /** @class */ (function () {
        function NgxDataTableModule() {
        }
        NgxDataTableModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    DataTable,
                    DefaultSorter,
                    Paginator,
                    BootstrapPaginator
                ],
                exports: [
                    DataTable,
                    DefaultSorter,
                    Paginator,
                    BootstrapPaginator
                ]
            })
        ], NgxDataTableModule);
        return NgxDataTableModule;
    }());

    exports.BootstrapPaginator = BootstrapPaginator;
    exports.DataTable = DataTable;
    exports.DefaultSorter = DefaultSorter;
    exports.NgxDataTableModule = NgxDataTableModule;
    exports.Paginator = Paginator;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-9-datatable.umd.js.map
