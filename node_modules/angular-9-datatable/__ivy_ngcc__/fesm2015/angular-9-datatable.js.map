{"version":3,"file":"angular-9-datatable.js","sources":["ng:/angular-9-datatable/lib/data-table.directive.ts","ng:/angular-9-datatable/lib/default-sorter.component.ts","ng:/angular-9-datatable/lib/paginator.component.ts","ng:/angular-9-datatable/lib/bootstrap-paginator.component.ts","ng:/angular-9-datatable/lib/data-table.module.ts","ng:/angular-9-datatable/public-api.ts","ng:/angular-9-datatable/angular-9-datatable.ts"],"names":["_.includes","_.orderBy","_.slice","_.min"],"mappings":"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","sourcesContent":["import {\r\n    Directive, Input, EventEmitter, SimpleChange, OnChanges, DoCheck, IterableDiffers,\r\n    IterableDiffer, Output\r\n} from \"@angular/core\";\r\nimport * as _ from \"lodash\";\r\nimport { ReplaySubject } from \"rxjs\";\r\n\r\nexport interface SortEvent {\r\n    sortBy: string | string[];\r\n    sortOrder: string\r\n}\r\n\r\nexport interface PageEvent {\r\n    activePage: number;\r\n    rowsOnPage: number;\r\n    dataLength: number;\r\n}\r\n\r\nexport interface DataEvent {\r\n    length: number;\r\n}\r\n\r\n@Directive({\r\n    selector: 'table[mfData]',\r\n    exportAs: 'mfDataTable'\r\n})\r\nexport class DataTable implements OnChanges, DoCheck {\r\n\r\n    private diff: IterableDiffer<any>;\r\n    @Input(\"mfData\") public inputData: any[] = [];\r\n\r\n    @Input(\"mfSortBy\") public sortBy: string | string[] = \"\";\r\n    @Input(\"mfSortOrder\") public sortOrder = \"asc\";\r\n    @Output(\"mfSortByChange\") public sortByChange = new EventEmitter<string | string[]>();\r\n    @Output(\"mfSortOrderChange\") public sortOrderChange = new EventEmitter<string>();\r\n\r\n    @Input(\"mfRowsOnPage\") public rowsOnPage = 1000;\r\n    @Input(\"mfActivePage\") public activePage = 1;\r\n\r\n    private mustRecalculateData = false;\r\n\r\n    public data: any[];\r\n\r\n    public onSortChange = new ReplaySubject<SortEvent>(1);\r\n    public onPageChange = new EventEmitter<PageEvent>();\r\n\r\n    public constructor(private differs: IterableDiffers) {\r\n        this.diff = differs.find([]).create(null);\r\n    }\r\n\r\n    public getSort(): SortEvent {\r\n        return { sortBy: this.sortBy, sortOrder: this.sortOrder };\r\n    }\r\n\r\n    public setSort(sortBy: string | string[], sortOrder: string): void {\r\n        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {\r\n            this.sortBy = sortBy;\r\n            this.sortOrder = _.includes([\"asc\", \"desc\"], sortOrder) ? sortOrder : \"asc\";\r\n            this.mustRecalculateData = true;\r\n            this.onSortChange.next({ sortBy: sortBy, sortOrder: sortOrder });\r\n            this.sortByChange.emit(this.sortBy);\r\n            this.sortOrderChange.emit(this.sortOrder);\r\n        }\r\n    }\r\n\r\n    public getPage(): PageEvent {\r\n        return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };\r\n    }\r\n\r\n    public setPage(activePage: number, rowsOnPage: number): void {\r\n        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {\r\n            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);\r\n            this.rowsOnPage = rowsOnPage;\r\n            this.mustRecalculateData = true;\r\n            this.onPageChange.emit({\r\n                activePage: this.activePage,\r\n                rowsOnPage: this.rowsOnPage,\r\n                dataLength: this.inputData ? this.inputData.length : 0\r\n            });\r\n        }\r\n    }\r\n\r\n    private calculateNewActivePage(previousRowsOnPage: number, currentRowsOnPage: number): number {\r\n        let firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;\r\n        let newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);\r\n        return newActivePage;\r\n    }\r\n\r\n    private recalculatePage() {\r\n        let lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);\r\n        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;\r\n        this.activePage = this.activePage || 1;\r\n\r\n        this.onPageChange.emit({\r\n            activePage: this.activePage,\r\n            rowsOnPage: this.rowsOnPage,\r\n            dataLength: this.inputData.length\r\n        });\r\n    }\r\n\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }): any {\r\n        if (changes[\"rowsOnPage\"]) {\r\n            this.rowsOnPage = changes[\"rowsOnPage\"].previousValue;\r\n            this.setPage(this.activePage, changes[\"rowsOnPage\"].currentValue);\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (changes[\"sortBy\"] || changes[\"sortOrder\"]) {\r\n            if (!_.includes([\"asc\", \"desc\"], this.sortOrder)) {\r\n                console.warn(\"angular2-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:\", this.sortOrder);\r\n                this.sortOrder = \"asc\";\r\n            }\r\n            if (this.sortBy) {\r\n                this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });\r\n            }\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (changes[\"inputData\"]) {\r\n            this.inputData = changes[\"inputData\"].currentValue || [];\r\n            this.recalculatePage();\r\n            this.mustRecalculateData = true;\r\n        }\r\n    }\r\n\r\n    public ngDoCheck(): any {\r\n        let changes = this.diff.diff(this.inputData);\r\n        if (changes) {\r\n            this.recalculatePage();\r\n            this.mustRecalculateData = true;\r\n        }\r\n        if (this.mustRecalculateData) {\r\n            this.fillData();\r\n            this.mustRecalculateData = false;\r\n        }\r\n    }\r\n\r\n    private fillData(): void {\r\n        this.activePage = this.activePage;\r\n        this.rowsOnPage = this.rowsOnPage;\r\n\r\n        let offset = (this.activePage - 1) * this.rowsOnPage;\r\n        let data = this.inputData;\r\n        var sortBy = this.sortBy;\r\n        if (typeof sortBy === 'string' || sortBy instanceof String) {\r\n            data = _.orderBy(data, this.caseInsensitiveIteratee(<string>sortBy), this.sortOrder == 'asc' ? 'asc' : 'desc');\r\n        } else {\r\n            data = _.orderBy(data, sortBy, this.sortOrder == 'asc' ? 'asc' : 'desc');\r\n        }\r\n        data = _.slice(data, offset, offset + this.rowsOnPage);\r\n        this.data = data;\r\n    }\r\n\r\n    private caseInsensitiveIteratee(sortBy: string) {\r\n        return (row: any): any => {\r\n            var value = row;\r\n            for (let sortByProperty of sortBy.split('.')) {\r\n                if (value) {\r\n                    value = value[sortByProperty];\r\n                }\r\n            }\r\n            if (value && typeof value === 'string' || value instanceof String) {\r\n                return value.toLowerCase();\r\n            }\r\n            return value;\r\n        };\r\n    }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { DataTable, SortEvent } from \"./data-table.directive\";\r\n\r\n@Component({\r\n    selector: \"mfDefaultSorter\",\r\n    template: `\r\n        <a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\r\n            <ng-content></ng-content>\r\n            <span *ngIf=\"isSortedByMeAsc\" class=\"glyphicon glyphicon-triangle-top fa fa-sort-up\" aria-hidden=\"true\"></span>\r\n            <span *ngIf=\"isSortedByMeDesc\" class=\"glyphicon glyphicon-triangle-bottom fa fa-sort-down\" aria-hidden=\"true\"></span>\r\n        </a>`\r\n})\r\nexport class DefaultSorter implements OnInit {\r\n    @Input(\"by\") sortBy: string;\r\n\r\n    isSortedByMeAsc: boolean = false;\r\n    isSortedByMeDesc: boolean = false;\r\n\r\n    public constructor(private mfTable: DataTable) {\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.mfTable.onSortChange.subscribe((event: SortEvent) => {\r\n            this.isSortedByMeAsc = (event.sortBy == this.sortBy && event.sortOrder == \"asc\");\r\n            this.isSortedByMeDesc = (event.sortBy == this.sortBy && event.sortOrder == \"desc\");\r\n        });\r\n    }\r\n\r\n    sort() {\r\n        if (this.isSortedByMeAsc) {\r\n            this.mfTable.setSort(this.sortBy, \"desc\");\r\n        } else {\r\n            this.mfTable.setSort(this.sortBy, \"asc\");\r\n        }\r\n    }\r\n}\r\n","import { Component, Input, SimpleChange, OnChanges, Optional } from \"@angular/core\";\r\nimport { DataTable, PageEvent } from \"./data-table.directive\";\r\n\r\n@Component({\r\n    selector: \"mfPaginator\",\r\n    template: `<ng-content></ng-content>`\r\n})\r\nexport class Paginator implements OnChanges {\r\n\r\n    @Input(\"mfTable\") inputMfTable: DataTable;\r\n\r\n    private mfTable: DataTable;\r\n\r\n    public activePage: number;\r\n    public rowsOnPage: number;\r\n    public dataLength: number = 0;\r\n    public lastPage: number;\r\n\r\n    public constructor(@Optional() private injectMfTable: DataTable) {\r\n    }\r\n\r\n    public ngOnChanges(changes: { [key: string]: SimpleChange }): any {\r\n        this.mfTable = this.inputMfTable || this.injectMfTable;\r\n        this.onPageChangeSubscriber(this.mfTable.getPage());\r\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\r\n    }\r\n\r\n    public setPage(pageNumber: number): void {\r\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\r\n    }\r\n\r\n    public setRowsOnPage(rowsOnPage: number): void {\r\n        this.mfTable.setPage(this.activePage, rowsOnPage);\r\n    }\r\n\r\n    private onPageChangeSubscriber = (event: PageEvent) => {\r\n        this.activePage = event.activePage;\r\n        this.rowsOnPage = event.rowsOnPage;\r\n        this.dataLength = event.dataLength;\r\n        this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);\r\n    };\r\n}","import { Component, Input, OnChanges } from \"@angular/core\";\r\nimport { DataTable } from \"./data-table.directive\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n    selector: \"mfBootstrapPaginator\",\r\n    template: `\r\n    <mfPaginator #p [mfTable]=\"mfTable\">\r\n        <ul class=\"pagination\" *ngIf=\"p.dataLength > p.rowsOnPage\">\r\n            <li class=\"page-item\" [class.disabled]=\"p.activePage <= 1\" (click)=\"p.setPage(1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">&laquo;</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 4 && p.activePage + 1 > p.lastPage\" (click)=\"p.setPage(p.activePage - 4)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-4}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 3 && p.activePage + 2 > p.lastPage\" (click)=\"p.setPage(p.activePage - 3)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-3}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 2\" (click)=\"p.setPage(p.activePage - 2)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-2}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage > 1\" (click)=\"p.setPage(p.activePage - 1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage-1}}</a>\r\n            </li>\r\n            <li class=\"page-item active\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 1 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 1)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+1}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 2 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 2)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+2}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 3 <= p.lastPage && p.activePage < 3\" (click)=\"p.setPage(p.activePage + 3)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+3}}</a>\r\n            </li>\r\n            <li class=\"page-item\" *ngIf=\"p.activePage + 4 <= p.lastPage && p.activePage < 2\" (click)=\"p.setPage(p.activePage + 4)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{p.activePage+4}}</a>\r\n            </li>\r\n            <li class=\"page-item\" [class.disabled]=\"p.activePage >= p.lastPage\" (click)=\"p.setPage(p.lastPage)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">&raquo;</a>\r\n            </li>\r\n        </ul>\r\n        <ul class=\"pagination pull-right float-sm-right\" *ngIf=\"p.dataLength > minRowsOnPage\">\r\n            <li class=\"page-item\" *ngFor=\"let rows of rowsOnPageSet\" [class.active]=\"p.rowsOnPage===rows\" (click)=\"p.setRowsOnPage(rows)\">\r\n                <a class=\"page-link\" style=\"cursor: pointer\">{{rows}}</a>\r\n            </li>\r\n        </ul>\r\n    </mfPaginator>\r\n    `\r\n})\r\nexport class BootstrapPaginator implements OnChanges {\r\n    @Input(\"rowsOnPageSet\") rowsOnPageSet = [];\r\n    @Input(\"mfTable\") mfTable: DataTable;\r\n\r\n    minRowsOnPage = 0;\r\n\r\n    ngOnChanges(changes: any): any {\r\n        if (changes.rowsOnPageSet) {\r\n            this.minRowsOnPage = _.min(this.rowsOnPageSet)\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DataTable } from './data-table.directive';\nimport { DefaultSorter } from './default-sorter.component';\nimport { Paginator } from './paginator.component';\nimport { BootstrapPaginator } from './bootstrap-paginator.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n],\ndeclarations: [\n    DataTable,\n    DefaultSorter,\n    Paginator,\n    BootstrapPaginator\n],\nexports: [\n    DataTable,\n    DefaultSorter,\n    Paginator,\n    BootstrapPaginator\n]\n})\nexport class NgxDataTableModule { }\n","/*\n * Public API Surface of data-table\n */\n\nexport * from './lib/data-table.directive';\nexport * from './lib/default-sorter.component';\nexport * from './lib/paginator.component';\nexport * from './lib/bootstrap-paginator.component';\nexport * from './lib/data-table.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}